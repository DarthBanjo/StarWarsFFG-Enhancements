{"name":"boost / setback to targeted actor","permission":{"default":0,"oUluFip2wYxEPBvf":3},"type":"script","flags":{"core":{"sourceId":"Macro.x31mnnhTcLELrLW5"}},"scope":"global","command":"/* add a boost or setback die targeted actor */\n/* \n    Description: Adds a boost or setback die targeted actor\n    Author: Wrycu\n    Date: 2021-01-09\n    NOTE: This macro requires some configuration; see below\n    NOTE: This macro requires an active target from the user running it\n    TODO: Detect if StatusIcons is active and increment if it is\n*/\n\n/* CONFIGURE ME */\n// select the base directory to your images (MUST CONTAIN TRAILING SLASH)\nvar base_path = \"resources/images/statuses/\";\n\n// select your image names\nvar images = {\n    boost: \"a-dice-boost.png\",\n    setback: \"a-dice-setback.png\"\n}\n/* DO NOT EDIT BELOW HERE UNLESS YOU KNOW WHAT YOU'RE DOING */\n\nfunction set_token_status(path) {\n    var target = game.user.targets.values().next()['value'];\n    let counter = EffectCounter.findCounter(target, path);\n    if (counter) {\n        counter.setValue(counter.getValue() + 1);\n    } else {\n        new ActiveEffectCounter(1,  path, target).update();\n    }\n}\n\nfunction clear_token_status(path) {\n    var target = game.user.targets.values().next()['value'];\n    let counter = EffectCounter.findCounter(target, path);\n    if (counter) {\n        counter.remove();\n    }\n}\n\nif (!game.user.targets.values().next()['value']) {\n    ui.notifications.warn(\"Select a target to add or remove dice\");\n    return;\n}\n\n/* dialog stuff */\nlet d = new Dialog({\n  title: \"Add boost/setback\",\n  content: `<p>Select status to apply</p>`,\n  buttons: {\n    boost: {\n      icon: '<i class=\"fas fa-arrow-up\"></i>',\n      label: \"Boost\",\n      callback: (html) => {\n        set_token_status(base_path + images['boost']);\n      }\n    },\n    setback: {\n      icon: '<i class=\"fas fa-arrow-down\"></i>',\n      label: \"Setback\",\n      callback: (html) => {\n        set_token_status(base_path + images['setback']);\n      }\n    },\n    clear: {\n      icon: '<i class=\"fas fa-eraser\"></i>',\n      label: \"Clear\",\n      callback: (html) => {\n        clear_token_status(base_path + images['setback']);\n        clear_token_status(base_path + images['boost']);\n      }\n    },\n    cancel: {\n      icon: '<i class=\"fas fa-times\"></i>',\n      label: \"Cancel\",\n      callback: () => console.log(\"Chose cancel\")\n    }\n  },\n  default: \"cancel\",\n  close: () => console.log(\"This always is logged no matter which option is chosen\")\n});\nd.render(true);","author":"oUluFip2wYxEPBvf","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"0vRA86dhcIAY4hzw"}
{"name":"configure tokens 1","permission":{"default":0,"oUluFip2wYxEPBvf":3},"type":"script","flags":{"core":{"sourceId":"Macro.xXyYafSnizstwJ4K"}},"scope":"global","command":"/* This will set every token with friendly disposition in scene to\n * always display their token bars and nameplate, and sets the first \n * bar to represent HP and removes the second token bar.\n*/\n\nconst tokens = canvas.tokens.placeables.map(token => {\n   if (token.data.disposition == CONST.TOKEN_DISPOSITIONS.FRIENDLY) {\n       return {\n           _id: token.id,\n           \"bar2.attribute\": \"stats.strain\",\n           \"bar1.attribute\": \"stats.wounds\",\n           \"displayName\": CONST.TOKEN_DISPLAY_MODES.HOVER,\n           \"displayBars\": CONST.TOKEN_DISPLAY_MODES.ALWAYS,\n       }\n    } else if (token.actor.data.type == \"minion\") {\n       var is_rival = token.actor.data.data.quantity.value <= 1;\n       token.data.actorLink = is_rival;\n       return {\n           _id: token.id,\n           \"bar2.attribute\": is_rival ? \"\" : \"quantity\",\n           \"bar1.attribute\": \"stats.wounds\",\n           \"displayName\": CONST.TOKEN_DISPLAY_MODES.OWNER_HOVER,\n           \"displayBars\": CONST.TOKEN_DISPLAY_MODES.HOVER\n       };\n    } else {\n       return {\n           _id: token.id,\n           \"bar2.attribute\": \"stats.strain\",\n           \"bar1.attribute\": \"stats.wounds\",\n           \"displayName\": CONST.TOKEN_DISPLAY_MODES.OWNER_HOVER,\n           \"displayBars\": CONST.TOKEN_DISPLAY_MODES.HOVER\n       };\n    }\n});\n\ncanvas.scene.updateEmbeddedEntity('Token', tokens)","author":"oUluFip2wYxEPBvf","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"1Rm2V74hQeV5e5wM"}
{"name":"configure tokens 2","permission":{"default":0,"oUluFip2wYxEPBvf":3},"type":"script","flags":{"core":{"sourceId":"Macro.WaR1yXFAme3AW4ko"}},"scope":"global","command":"// This will set up the configuration for the Actors' tokens\n// Initial development by Aljovin\n//\n//\n// By design this will set the following:\n// Minion: Top bar : quantity, bottom bar: stats.wounds\n// characters: top bar : stats.strain, bottom bar : stats.wounds\n// vehicules: top bar : stats.systemStrain, bottom bar : stats.hullTrauma\n// The display will be \"Always for Owner\"\n// \n// Execute this macro before adding actors to the scene, it will update every actors at once\n// \n// Release Notes\n// Version 1.0 - Initial version\n\nlet applyChanges = false;\nnew Dialog({\n  title: `Standardize token Stats Bars`,\n  content: `\n    <form>\n      <div class=\"form-group\">\n        <label>This will update the actor's token to update bars to the standard version.</label>\n       \n      </div>\n      \n    </form>\n    `,\n  buttons: {\n    yes: {\n      icon: \"<i class='fas fa-check'></i>\",\n      label: `Apply Changes`,\n      callback: () => applyChanges = true\n    },\n    no: {\n      icon: \"<i class='fas fa-times'></i>\",\n      label: `Cancel Changes`\n    },\n  },\n  default: \"yes\",\n  close: html => {\n    if (applyChanges) {\n      for ( let actor of game.actors ) {\n        console.log(\"updating \" + actor.data.name);\n        let token = actor.data.token;\n        \n        // Update Token\n        switch (actor.data.type) {\n          case \"minion\":\n            console.log(\"minion\");\n            actor.data.token.bar1.attribute = \"quantity\";\n            actor.data.token.bar2.attribute = \"stats.wounds\";\n            actor.data.token.displayBars = 40;\n            break;\n          case \"character\":\n            console.log(\"character\");\n            actor.data.token.bar1.attribute = \"stats.strain\";\n            actor.data.token.bar2.attribute = \"stats.wounds\";\n            actor.data.token.displayBars = 40;\n            break;\n          case \"vehicle\":\n            console.log(\"vehicle\");\n            actor.data.token.bar1.attribute = \"stats.systemStrain\";\n            actor.data.token.bar2.attribute = \"stats.hullTrauma\";\n            actor.data.token.displayBars = 40;\n            break;\n          default:\n\n        }\n        \n      }\n      console.log(\"This will always be logged: Tokens updated\");\n    }\n  }\n}).render(true);","author":"oUluFip2wYxEPBvf","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"Hc4cx7g2oaWQFEgI"}
{"name":"boost to next allied slot","permission":{"default":0,"oUluFip2wYxEPBvf":3},"type":"script","flags":{"core":{"sourceId":"Macro.ou8056ZtK8J8Gg3j"}},"scope":"global","command":"/* \n    Description: Adds a boost die reminder to the next initiative slot with the same disposition as the current slot (e.g. adds a reminder for the next PC slot)\n    Author: Wrycu\n    Date: 2021-01-09\n    NOTE: This macro requires setting the disposition of tokens properly\n    NOTE: This macro requires the \"Turn Alert\" module\n*/\n\nfunction find_applicable_slot(current_disposition) {\n    /* given a combat slot, find the next available slot with the same disposition */\n    var search_id = game.combat.current.turn;\n    for (var i = search_id + 1; i < game.combat.combatants.length; i++) {\n        if (game.combat.turns[i].token.disposition === current_disposition) {\n            return [0, game.combat.turns[i]._id];\n        }\n    }\n    for (var i = 0; i <= search_id; i++) {\n        if (game.combat.turns[i].token.disposition === current_disposition) {\n            return [1, game.combat.turns[i]._id];\n        }\n    }\n    return [0, false];\n}\n\n// validate the required module is loaded\nif (typeof TurnAlert === \"undefined\")\n    ui.notifications.error(\"It appears TurnAlert is not installed - please do so before using this macro\");\nelse if (!game.combat)\n    ui.notifications.warn(\"You must have an active combat to use this macro\")\nelse {\n    // set up the type of die we'll be sending a reminder about\n    var die_type = \"bo\";\n    // determine if the current slot is friendly, neutral, or enemy\n    var current_disposition = game.combat.getCombatantByToken(game.combat.current.tokenId).token.disposition;\n    // find the next slot with a disposition matching the current. this may be itself (in the next round)\n    var data = find_applicable_slot(current_disposition);\n    // check if we successfully found a token or not. it shouldn't be possible to fail to find one, but who knows.\n    if (data[1] === false)\n        ui.notifications.warn(\"Unable to find any actor with the correct disposition\")\n    else\n    {\n        var message = \"[Reminder] The active character has a [\" + die_type + \"].\";\n        // create the alert object\n        const alertData = {\n            round: data[0],\n            roundAbsolute: false, // we want relative round numbers\n            turnId: data[1],\n            message: message,\n            label: \"Available die reminder\",\n        };\n        // create the alert itself\n        TurnAlert.create(alertData);\n    }\n}","author":"oUluFip2wYxEPBvf","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"WoSul3KNscInIa62"}
{"name":"criticals","permission":{"default":0,"oUluFip2wYxEPBvf":3},"type":"script","flags":{"core":{"sourceId":"Macro.gBSLgA5aUJ9c56H0"}},"scope":"global","command":"token = game.user.targets.values().next()['value'];\n\nif (!token || !token.actor) {\n    ui.notifications.warn(\"Select a token to use the Critical macro\");\n    return;\n}\n\n// Criticals are items whose type starts with \"critical\". Count these up and multiple by 10 for the base.\nconst current_critical_offset = 10 * token.actor.data.items.reduce((value, item) => {\n    var is_critical = item.type.startsWith(\"critical\");\n    return value + (is_critical ? 1 : 0);\n}, 0);\n\nconst tables = game.tables.map(table => {\n  // If the token is a vehicle, default select the \"Critical Hit\" table. Otherwise default to the\n  // \"Critical Injury\" table. No default will be selected if your table names do not match these.\n  var is_vehicle = token.actor.data.type == \"vehicle\";\n  var table_name = is_vehicle ? \"Critical Hit\" : \"Critical Injury\";\n  var selected = table.data.name == table_name ? \"selected\" : \"\";\n  return `<option value=\"${table.data._id}\" ${selected}>${table.data.name}</option>`\n});\n\nlet d = new Dialog({\n  title: \"Critical Roll\",\n  content: `<p>Select table and modifier</p>\n    <div class=\"grid grid-2col\" style=\"padding-bottom: 1em;\">\n      <div>Modifier: \n        <input name=\"modifier\" class=\"modifier\" type=\"text\" value=\"${current_critical_offset}\" data-dtype=\"String\" />\n      </div>\n      <div>\n        Table: <select class=\"crittable\">${tables.join(\"\")}</select>\n      </div>\n    </div>`,\n  buttons: {\n    one: {\n      icon: '<i class=\"fas fa-check\"></i>',\n      label: \"Roll Critical\",\n      callback: (html) => {\n        let modifier;\n        modifier = parseInt(html.find(\".modifier\").val(), 10);\n        if(isNaN(modifier)) {\n          modifier = 0;\n        }\n        const table = html.find(\".crittable :selected\").val();\n        const critRoll = new Roll(`1d100 + ${modifier}`);\n        const tableResult = game.tables.get(table).draw({roll: critRoll, displayChat: true});\n\n        // Use the roll table to look up the item in the compendium. Automatically add it to the selected token.\n        tableResult.then(roll => {\n            var result = roll.results[0];\n            return game.packs.get(result.collection).getEntity(result.resultId);\n        }).then(result => {\n            token.actor.createOwnedItem(result.data);\n        });\n      }\n    },\n    two: {\n      icon: '<i class=\"fas fa-times\"></i>',\n      label: \"Cancel\",\n      callback: () => console.log(\"Chose Two\")\n    }\n  },\n  default: \"two\",\n  close: () => console.log(\"This always is logged no matter which option is chosen\")\n});\nd.render(true);","author":"oUluFip2wYxEPBvf","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"yf7dGb2ac0wudLEw"}
